<?php

declare(strict_types=1);

namespace Modules\Theme\Http\Livewire;

/*
 * https://github.com/kdion4891/laravel-livewire-tables/blob/master/src/TableComponent.php
 */

//use Illuminate\Support\Carbon;
use Illuminate\Database\Eloquent\Builder;
//*
use Illuminate\Support\Str;
use Livewire\Component;
use Livewire\WithPagination;
use Modules\Theme\Services\ColumnService;
use Modules\Theme\Traits\ThanksYajra;
use Modules\LU\Models\User;

//*/

/**
 * Class XotBaseTableComponent.
 */
abstract class XotBaseTableComponent extends Component
{
    use WithPagination;
    use ThanksYajra;

    public string $table_class;

    public string $thead_class;

    public string $header_view;

    public string $footer_view;

    public bool $search;

    public string $checkbox;

    public string $checkbox_side;

    public string $checkbox_attribute = 'id';

    public bool $checkbox_all = false;

    public array $checkbox_values = [];

    public string $sort_attribute = 'id';

    public string $sort_direction = 'desc';

    public int $per_page;

    /*
    public function mount():void {
        $this->setTableProperties();
    }
    */

    public function setTableProperties(): void
    {
        foreach (['table_class', 'thead_class', 'checkbox', 'checkbox_side', 'per_page'] as $property) {
            $this->$property = $this->$property ?? config('laravel-livewire-tables.'.$property);
        }
    }

    /**
     * Render the component.
     *
     * @return \Illuminate\Contracts\View\View
     */
    public function render():\Illuminate\Contracts\Support\Renderable
    {
        return $this->tableView();
    }

    /**
     * @return \Illuminate\Contracts\View\View
     */
    public function tableView()
    {
        /** 
        * @phpstan-var view-string
        */
        $view = 'theme::livewire.xot_base_table_component';
        $view_params = [
            'view' => $view,
            'columns' => $this->columns(),
            'models' => $this->models()->paginate($this->per_page),
        ];

        return view()->make($view, $view_params);
    }

    /**
     * @return array
     */
    public function columns()
    {
        return [
            ColumnService::make('user_id')->searchable()->sortable(),
            ColumnService::make('first_name')->searchable()->sortable(),
            ColumnService::make('Email')->searchable()->sortable(),
            ColumnService::make('last_login_at')->searchable()->sortable(),
            ColumnService::make('Updated At')->searchable()->sortable(),
        ];
    }

    /**
     * @param array $attribute
     *
     * @return null
     */
    public function thClass($attribute)
    {
        return null;
    }

    /**
     * @param mixed $model
     *
     * @return null
     */
    public function trClass($model)
    {
        return null;
    }

    /**
     * @param array $attribute
     * @param mixed $value
     *
     * @return null
     */
    public function tdClass($attribute, $value)
    {
        return null;
    }

    /**
     * @return Builder|User
     */
    public function query()
    {
        return User::query();
    }

    /**
     * @return Builder|\Illuminate\Database\Query\Builder|mixed|User
     */
    public function models()
    {
        $models = $this->query();

        if ($this->search) {
            $models->where(
                function (Builder $query) {
                    foreach ($this->columns() as $column) {
                        if ($column->searchable) {
                            if (Str::contains($column->attribute, '.')) {
                                $relationship = $this->relationship($column->attribute);

                                $query->orWhereHas(
                                    $relationship->name, function (Builder $query) use ($relationship) {
                                        $query->where($relationship->attribute, 'like', '%'.$this->search.'%');
                                    }
                                );
                            } elseif (Str::endsWith($column->attribute, '_count')) {
                                // No clean way of using having() with pagination aggregation, do not search counts for now.
                                // If you read this and have a good solution, feel free to submit a PR :P
                            } else {
                                $query->orWhere($query->getModel()->getTable().'.'.$column->attribute, 'like', '%'.$this->search.'%');
                            }
                        }
                    }
                }
            );
        }

        if (Str::contains($this->sort_attribute, '.')) {
            $relationship = $this->relationship($this->sort_attribute);
            $sort_attribute = $this->attribute($models, $relationship->name, $relationship->attribute);
        } else {
            $sort_attribute = $this->sort_attribute;
        }

        if (null !== ($column = $this->getColumnByAttribute($this->sort_attribute)) && is_callable($column->sortCallback)) {
            return app()->call($column->sortCallback, ['models' => $models, 'sort_attribute' => $sort_attribute, 'sort_direction' => $this->sort_direction]);
        }

        return $models->orderBy($sort_attribute, $this->sort_direction);
    }

    public function updatedSearch(): void
    {
        $this->gotoPage(1);
    }

    public function updatedCheckboxAll(): void
    {
        $this->checkbox_values = [];

        if ($this->checkbox_all) {
            $this->models()->each(
                function ($model) {
                    $this->checkbox_values[] = (string) $model->{$this->checkbox_attribute};
                }
            );
        }
    }

    public function updatedCheckboxValues(): void
    {
        $this->checkbox_all = false;
    }

    /**
     * @param string $attribute
     */
    public function sort($attribute): void
    {
        if ($this->sort_attribute != $attribute) {
            $this->sort_direction = 'asc';
        } else {
            $this->sort_direction = 'asc' == $this->sort_direction ? 'desc' : 'asc';
        }

        $this->sort_attribute = $attribute;
    }

    /**
     * @param string $attribute
     *
     * @return mixed|null
     */
    protected function getColumnByAttribute($attribute)
    {
        foreach ($this->columns() as $col) {
            if ($col->attribute === $attribute) {
                return $col;
            }
        }

        return null;
    }
}
